{"version":3,"sources":["config.js","components/Welcome/Welcome.js","components/Chat/Message/Item.js","components/Chat/Message/List.js","components/Chat/Message/Input.js","components/Chat/Message/Message.js","components/Chat/SidePanel/Conversations.js","components/Chat/SidePanel/Users.js","components/Chat/SidePanel/Groups.js","components/Chat/SidePanel/SidePanel.js","components/Chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["SERVER_URL","SOCKET_MSG","connection","disconnect","setOnline","join","leave","message","sendMessage","roomData","onlineUsers","MSG_TYPE","admin","sent","received","Welcome","location","history","paramsURL","search","queryString","parse","room","useState","setNotification","userNameRef","useRef","handleOnClickLink","event","current","value","fetch","method","headers","body","JSON","stringify","name","then","response","json","data","status","user","id","link","push","redirectToLink","console","log","preventDefault","className","ref","type","placeholder","onKeyPress","key","htmlFor","disabled","onClick","TIME_FORMAT","Item","currentUser","userList","sender_id","room_id","content","created_at","isCurrentUserSent","seen_by","moment","format","avatar","senderName","sender","filter","u","src","alt","contentUserMsgDOM","List","currentRoom","messageList","myRef","useLayoutEffect","scrollTop","scrollHeight","m","map","msg","Input","func","handleOnChangeMessage","handleOnKeyPressMessage","onChange","aria-hidden","Message","handleClickLeaveRoom","copyGroupLink","url","textField","document","createElement","innerText","appendChild","select","execCommand","remove","error","copyToClipboard","window","origin","encodeURI","Object","keys","length","Fragment","room_type","replace","Conversations","conversationList","handleClickChooseRoom","filteredList","item","Users","handleClickJoinP2P","Groups","roomList","notificationRoom","notifCondition","includes","ACTIVE_TAB","conversations","users","SidePanel","socket","handleClickCreateRoom","handleClickDisconnect","activeTab","setActiveTab","alert","Chat","userData","setUserData","setUserList","setRoomData","setRoomList","setMessage","setMessageList","joindedRooms","setJoindedRooms","setNotificationRoom","emit","useEffect","socketio","userName","roomName","userRes","roomRes","on","handleSocketDisconnect","list","newObj","prompt","roomType","index","indexOf","splice","confirm","target","App","basename","process","path","exact","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f55ba5d.chunk.js","sourcesContent":["export const SERVER_URL = 'http://localhost:5000';\nexport const SERVER_NAME = 'locahost';\n\nexport const SOCKET_MSG = {\n  connection: 'connection',\n  disconnect: 'disconnect',\n  setOnline: 'setOnline',\n  join: 'join',\n  leave: 'leave',\n  message: 'message',\n  sendMessage: 'sendMessage',\n  roomData: 'roomData',\n  onlineUsers: 'onlineUsers'\n};\n\nexport const MSG_TYPE = {\n  admin: 1,\n  sent: 2,\n  received: 3\n};\n","import React, { useState, useRef } from 'react';\nimport queryString from 'query-string';\nimport { Link } from 'react-router-dom';\n\nimport { SERVER_URL } from '../../config';\n\nfunction Welcome({ location, history }) {\n  // check custom link (user and/or roomName)\n  const paramsURL = location.search;\n  const { room = '' } = queryString.parse(paramsURL);\n\n  const [notification, setNotification] = useState(\n    'Please check your username'\n  );\n\n  const userNameRef = useRef(null);\n\n  function redirectToLink(name) {\n    let link = '';\n    if (name && room) link = `/chat?user=${name}&room=${room}`;\n    else if (name) link = `/chat?user=${name}`;\n\n    history.push(link);\n  }\n\n  function handleOnClickLink(event) {\n    if (!userNameRef || !userNameRef.current || !userNameRef.current.value) {\n      setNotification('Please type your username');\n      return event.preventDefault();\n    }\n\n    fetch(`${SERVER_URL}/checkLogin`, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        name: userNameRef.current.value\n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status === 200 && data.user.id) {\n          setNotification('Username found');\n          redirectToLink(data.user.name);\n        } else if (data.status === 400)\n          console.log(data.message, 'error to join, please try again');\n      });\n\n    return null;\n  }\n\n  function handleOnKeyPressInput(event) {\n    const { key } = event;\n\n    if (key === 'Enter') handleOnClickLink(event);\n\n    return null;\n  }\n\n  return (\n    <div className='h-100 d-flex justify-content-center flex-column p-5'>\n      <h1 className='text-center'>Welcome</h1>\n      <hr className='pt-4 pb-2 w-25 border-info' />\n      <div>\n        <div className='form-group d-flex flex-column'>\n          {/* <label\n            htmlFor='username'\n            className='p-0 m-0 font-weight-bold align-self-center'>\n            Username\n          </label> */}\n          <input\n            ref={userNameRef}\n            type='username'\n            className='form-control'\n            id='username'\n            placeholder='Type your username...'\n            onKeyPress={handleOnKeyPressInput}\n          />\n        </div>\n        {room && (\n          <div className='form-group d-flex flex-column align-items-center'>\n            <label htmlFor='roomname' className='p-0 m-0 font-weight-bold'>\n              Room\n            </label>\n            <input\n              value={room}\n              disabled\n              type='text'\n              className='form-control'\n              id='roomname'\n              placeholder='Join to room name...'\n            />\n          </div>\n        )}\n        <div className='text-center p-4 d-flex flex-column align-items-center'>\n          {/* <div>{notification}</div> */}\n          <button\n            type='submit'\n            className='btn btn-primary'\n            onClick={handleOnClickLink}>\n            Let's go\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Welcome;\n","import React from 'react';\n\nimport { MSG_TYPE } from '../../../config';\n\nimport moment from 'moment';\n\nconst TIME_FORMAT = 'DD-MM-YYYY HH:MM';\n\nfunction Item({ currentUser, userList, message }) {\n  const {\n    id = 0,\n    sender_id = 0,\n    room_id = 0,\n    content = '',\n    created_at = '1975-01-01 00:00:00',\n    seen_by = []\n  } = message;\n\n  let isCurrentUserSent = false;\n\n  if (sender_id === currentUser.id) isCurrentUserSent = true;\n\n  const contentAdminMsgDOM = () => {\n    return (\n      <li className='admin'>\n        <p>{content}</p>\n        <span>{moment(created_at).format(TIME_FORMAT)}</span>\n      </li>\n    );\n  };\n\n  const contentUserMsgDOM = avatar => {\n    let senderName = '';\n    const sender = userList.filter(u => u.id === sender_id)[0];\n    if (sender) senderName = sender.name;\n\n    return (\n      <li className={isCurrentUserSent ? 'sent' : 'received'}>\n        {!isCurrentUserSent && <img src={avatar.src} alt={avatar.name} />}\n        <div>\n          <span className='name'>{isCurrentUserSent ? 'You' : senderName}</span>\n          <p>{content}</p>\n          <span>{moment(created_at).format(TIME_FORMAT)}</span>\n        </div>\n        {isCurrentUserSent && <img src={avatar.src} alt={avatar.name} />}\n      </li>\n    );\n  };\n\n  return sender_id === MSG_TYPE.admin\n    ? contentAdminMsgDOM()\n    : contentUserMsgDOM({ src: 'img/avatar-male.png', name: 'Avatar' });\n}\n\nexport default Item;\n","import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\n\nimport Item from './Item';\n\nfunction List({ currentUser, userList, currentRoom, messageList }) {\n  const myRef = useRef(null);\n\n  // auto scroll to bottom\n  useLayoutEffect(() => {\n    if (myRef) myRef.current.scrollTop = myRef.current.scrollHeight;\n  }, [messageList]);\n\n  return (\n    <div className='messages' ref={myRef}>\n      <ul>\n        {messageList &&\n          messageList\n            .filter(m => m.room_id === currentRoom.id)\n            .map(msg => (\n              <div key={msg.id}>\n                <Item\n                  currentUser={currentUser}\n                  userList={userList}\n                  message={msg}\n                />\n              </div>\n            ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default List;\n","import React from 'react';\n\nfunction Input({ message, func }) {\n  const { handleOnChangeMessage, handleOnKeyPressMessage, sendMessage } = func;\n\n  return (\n    <div className='message-input'>\n      <div className='wrap'>\n        <input\n          type='text'\n          placeholder='Write your message...'\n          value={message}\n          onChange={handleOnChangeMessage}\n          onKeyPress={handleOnKeyPressMessage}\n        />\n        <button className='submit' onClick={sendMessage}>\n          <i className='fa fa-paper-plane' aria-hidden='true'></i>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Input;\n","import React from 'react';\n\nimport List from './List';\nimport Input from './Input';\n\nfunction copyToClipboard(url) {\n  try {\n    const textField = document.createElement('textarea');\n    textField.innerText = url;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n\n    const message = `Copied to clipboard! ${url}`;\n    console.log(message, 'success');\n  } catch (error) {\n    const message = 'Cannot copy to clipboard. Please try again!';\n    console.log(message);\n  }\n}\n\nfunction Message({\n  currentUser,\n  userList,\n  currentRoom,\n  message,\n  messageList,\n  func\n}) {\n  const { handleClickLeaveRoom } = func;\n\n  function formattedName(type, name) {\n    // name: CurrentUserAnotherUser\n    if (type === 1) return `${name.replace(currentUser.name, '')}`;\n    else if (type === 2) return `${name}`;\n  }\n\n  function copyGroupLink(name) {\n    const url = `${window.location.origin}?room=${encodeURI(name)}`;\n    copyToClipboard(url);\n  }\n\n  return (\n    <div className='content'>\n      {Object.keys(currentRoom).length ? (\n        <React.Fragment>\n          <div className='contact-profile d-flex justify-content-between align-items-center pl-4 pr-4'>\n            <i\n              className='fa fa-share'\n              aria-hidden='true'\n              onClick={() => copyGroupLink(currentRoom.name)}></i>\n            <p>{formattedName(currentRoom.room_type, currentRoom.name)}</p>\n            <i\n              className='fa fa-close'\n              aria-hidden='true'\n              onClick={() => handleClickLeaveRoom(currentRoom)}></i>\n          </div>\n\n          <List\n            currentUser={currentUser}\n            userList={userList}\n            currentRoom={currentRoom}\n            messageList={messageList}\n          />\n\n          <Input message={message} func={func} />\n        </React.Fragment>\n      ) : (\n        <span className='h-100 d-flex justify-content-center align-items-center'>\n          Message Chat\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport default Message;\n","import React from 'react';\n\nfunction Conversations({\n  currentUser,\n  currentRoom,\n  conversationList,\n  handleClickChooseRoom\n}) {\n  const filteredList = conversationList;\n\n  function formattedName(type, name) {\n    // name: CurrentUserAnotherUser\n    if (type === 1) return `P2P: ${name.replace(currentUser.name, '')}`;\n    else if (type === 2) return `Group: ${name}`;\n  }\n\n  return (\n    <React.Fragment>\n      <ul>\n        {filteredList.map(item => (\n          <li\n            key={item.id}\n            className={`contact ${\n              currentRoom.name === item.name ? 'active' : ''\n            }`}\n            onClick={() => handleClickChooseRoom(item)}>\n            <div className='wrap'>\n              <div className='meta'>\n                <p className='name'>{formattedName(item.type, item.name)}</p>\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </React.Fragment>\n  );\n}\n\nexport default Conversations;\n","import React from 'react';\n\nfunction Users({ currentUser, userList, handleClickJoinP2P }) {\n  const filteredList = userList.filter(u => u.name !== currentUser.name);\n  return (\n    <React.Fragment>\n      <p className='tag'>Users</p>\n      <ul>\n        {filteredList.map(item => (\n          <li\n            key={item.id}\n            className='contact'\n            onClick={() => handleClickJoinP2P(item)}>\n            {/* active */}\n            <div className='wrap'>\n              <span className='contact-status online'></span>\n              <img src='img/avatar-male.png' alt='' />\n              <div className='meta'>\n                <p className='name'>{item.name}</p>\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </React.Fragment>\n  );\n}\n\nexport default Users;\n","import React from 'react';\n\nfunction Groups({\n  currentUser,\n  currentRoom,\n  roomList,\n  notificationRoom,\n  handleClickChooseRoom\n}) {\n  const filteredList = roomList;\n\n  const notifCondition = room => {\n    if (\n      currentUser &&\n      currentUser.id &&\n      notificationRoom &&\n      Object.keys(notificationRoom).length &&\n      notificationRoom[currentUser.id]\n    ) {\n      return (\n        Object.keys(notificationRoom).includes(currentUser.id) &&\n        notificationRoom[currentUser.id].includes(room.id)\n      );\n    }\n\n    return false;\n  };\n\n  return (\n    <React.Fragment>\n      <p className='tag'>Groups</p>\n      <ul>\n        {filteredList.map(item => (\n          <li\n            key={`room${item.id}`}\n            className={`contact ${\n              currentRoom.name === item.name ? 'active' : ''\n            }`}\n            onClick={() => handleClickChooseRoom(item)}>\n            <div className='wrap d-flex align-items-center justify-content-between'>\n              <div className='meta'>\n                <p\n                  className={`name ${notifCondition(item) ? 'text-bold' : ''}`}>\n                  {item.name}\n                </p>\n              </div>\n              {notifCondition(item) && (\n                <div className='contact-status online'></div>\n              )}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </React.Fragment>\n  );\n}\n\nexport default Groups;\n","import React, { useState } from 'react';\nimport Conversations from './Conversations';\nimport Users from './Users';\nimport Groups from './Groups';\n\nconst ACTIVE_TAB = {\n  conversations: 1,\n  users: 2\n};\n\nfunction SidePanel({\n  currentUser,\n  userList,\n  currentRoom,\n  roomList,\n  notificationRoom,\n  conversationList,\n  func\n}) {\n  const {\n    handleClickCreateRoom,\n    handleClickJoinP2P,\n    handleClickChooseRoom,\n    handleClickDisconnect\n  } = func;\n\n  const [activeTab, setActiveTab] = useState(ACTIVE_TAB.users);\n\n  return (\n    <div id='sidepanel'>\n      <div id='profile'>\n        <div className='wrap d-flex flex-row justify-content-between'>\n          <div>\n            <img\n              id='profile-img'\n              src='img/avatar-male.png'\n              className='online'\n              alt=''\n            />\n            <p>{currentUser.name}</p>\n          </div>\n          <div>\n            <i\n              className='fa fa-sign-out expand-button pr-3'\n              aria-hidden='true'\n              onClick={handleClickDisconnect}></i>\n            <i\n              className='fa fa-plus expand-button pr-3'\n              aria-hidden='true'\n              onClick={handleClickCreateRoom}></i>\n          </div>\n        </div>\n      </div>\n      {/* <div id='search'>\n          <label for=''>\n            <i className='fa fa-search' aria-hidden='true'></i>\n          </label>\n          <input type='text' placeholder='Search...' />\n        </div> */}\n      <div id='conversations'>\n        {activeTab === ACTIVE_TAB.conversations ? (\n          <Conversations\n            currentUser={currentUser}\n            currentRoom={currentRoom}\n            conversationList={conversationList}\n            handleClickChooseRoom={handleClickChooseRoom}\n          />\n        ) : (\n          <React.Fragment>\n            <Users\n              currentUser={currentUser}\n              userList={userList}\n              handleClickJoinP2P={handleClickJoinP2P}\n            />\n            <Groups\n              currentUser={currentUser}\n              currentRoom={currentRoom}\n              roomList={roomList}\n              notificationRoom={notificationRoom}\n              handleClickChooseRoom={handleClickChooseRoom}\n            />\n          </React.Fragment>\n        )}\n      </div>\n\n      <div id='bottom-bar'>\n        <button\n          id='conversations'\n          className={activeTab === ACTIVE_TAB.conversations ? 'active' : ''}\n          onClick={() => {\n            alert('TODO: Conversations (multi-channel) is coming soon');\n            // setActiveTab(ACTIVE_TAB.conversations);\n          }}>\n          <i className='fa fa-exchange fa-fw' aria-hidden='true'></i>\n          <span>Conversations</span>\n        </button>\n        <button\n          id='users'\n          className={activeTab === ACTIVE_TAB.users ? 'active' : ''}\n          onClick={() => setActiveTab(ACTIVE_TAB.users)}>\n          <i className='fa fa-users fa-fw' aria-hidden='true'></i>\n          <span>Users & Groups</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default SidePanel;\n","import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport socketio from 'socket.io-client';\n\nimport { SERVER_URL, SOCKET_MSG } from '../../config';\n\nimport Message from './Message/Message';\n\nimport './Chat.css';\nimport SidePanel from './SidePanel/SidePanel';\n\nlet socket;\n\nfunction Chat({ location, history }) {\n  const paramsURL = location.search;\n\n  const [userData, setUserData] = useState({});\n  const [userList, setUserList] = useState([]);\n  const [roomData, setRoomData] = useState({});\n  const [roomList, setRoomList] = useState([]);\n\n  const [conversationList, setConversationList] = useState([]);\n\n  const [message, setMessage] = useState(''); // messsage from input\n  const [messageList, setMessageList] = useState([]); // message list from socket\n\n  const [joindedRooms, setJoindedRooms] = useState([]); // joined room list\n  const [notificationRoom, setNotificationRoom] = useState({});\n\n  // handle user connect/disconnect\n  useEffect(() => {\n    const data = queryString.parse(paramsURL);\n\n    // set current user and room name\n    const { user = '', room = '' } = data;\n    // call socket from server\n    socket = socketio(SERVER_URL);\n\n    // connect\n    socket.emit(\n      'userConnect',\n      { userName: user, roomName: room },\n      ({ userRes, roomRes }) => {\n        if (userRes) setUserData(userRes);\n\n        // if user has invitation link\n        if (roomRes) setRoomData(roomRes);\n\n        socket.on('getOnlineUsers', data => setUserList(data));\n\n        socket.on('getAvailableRooms', data => setRoomList(data));\n      }\n    );\n\n    return () => handleSocketDisconnect(user);\n  }, [SERVER_URL, paramsURL]);\n\n  // handle user send message\n  useEffect(() => {\n    socket.on(SOCKET_MSG.message, list => setMessageList(list));\n  }, [messageList]);\n\n  // handle user notification\n  useEffect(() => {\n    socket.on('notification', ({ user, room }) => {\n      // Structure: {senderId: [roomId1, roomId2, ...]}\n      const newObj = {\n        ...notificationRoom,\n        [user.id]:\n          notificationRoom[user.id] &&\n          !notificationRoom[user.id].includes(room.id)\n            ? [...notificationRoom[user.id], room.id]\n            : [room.id]\n      };\n\n      setNotificationRoom(newObj);\n    });\n  }, [messageList]);\n\n  // handle user join room\n  useEffect(() => {\n    if (Object.keys(userData).length && Object.keys(roomData).length) {\n      // TODO: improve switch channels\n      // if (joindedRooms.includes(roomData.id)) handleSwitchRoom(roomData);\n      // else handleSocketJoinRoom(userData, roomData);\n\n      handleSocketJoinRoom(userData, roomData);\n    }\n  }, [roomData]);\n\n  function handleSocketJoinRoom(user, room) {\n    socket.emit(SOCKET_MSG.join, { user, room }, room => {\n      setJoindedRooms([...joindedRooms, room.id]);\n      // setRoomData(room);\n    });\n  }\n\n  // function handleSwitchRoom(room) {\n  //   console.log(room.name, 'switched');\n  // }\n\n  function handleClickChooseRoom(room) {\n    if (room) {\n      setRoomData(room);\n\n      // reset notification when click on room notified\n      if (\n        notificationRoom &&\n        notificationRoom.room &&\n        room.name === notificationRoom.room.name\n      ) {\n        const index = notificationRoom[userData.id].indexOf(room.id);\n        if (index > -1) {\n          notificationRoom[userData.id].splice(index, 1);\n        }\n\n        const newObj = {\n          ...notificationRoom,\n          [userData.id]: [...notificationRoom[userData.id]]\n        };\n\n        setNotificationRoom(newObj);\n      }\n    }\n  }\n\n  function handleSocketDisconnect(user) {\n    socket.emit('userDisconnect', user);\n    // disconnect and turn off socket\n    socket.emit(SOCKET_MSG.disconnect);\n    socket.disconnect();\n  }\n\n  function handleClickCreateRoom(event) {\n    event.preventDefault();\n\n    const room = window.prompt(\n      'To create new room, please enter room name here'\n    );\n\n    if (room) {\n      socket.emit(\n        'createNewRoom',\n        { user: userData, roomName: room, roomType: 2 },\n        data => setRoomData(data)\n      );\n    }\n  }\n\n  function handleClickJoinP2P(user) {\n    // if (user) {\n    //   socket.emit(\n    //     'createNewRoom',\n    //     {\n    //       user: userData,\n    //       roomName: `${userData.name}-${user.name}`, // UserAUserB\n    //       roomType: 1\n    //     },\n    //     data => {\n    //       setRoomData(data);\n    //       setActiveMessagePanel(true);\n    //     }\n    //   );\n    // }\n    alert('TODO: P2P feature is coming soon');\n  }\n\n  function handleClickLeaveRoom(room) {\n    if (room) {\n      socket.emit(SOCKET_MSG.leave, { user: userData, room }, room => {\n        setRoomData({});\n      });\n    }\n  }\n\n  function handleClickDisconnect(event) {\n    event.preventDefault();\n\n    const popup = window.confirm('Are you sure you want to disconnect?');\n    if (popup) {\n      history.push('/');\n    }\n  }\n\n  function sendMessage(event) {\n    //prevent browser reload the whole page when pressing key or clicking button\n    event.preventDefault();\n\n    if (message) {\n      socket.emit(\n        SOCKET_MSG.sendMessage,\n        { user: userData, room: roomData, message },\n        () => setMessage('')\n      );\n    }\n  }\n\n  function handleOnChangeMessage(event) {\n    const { value = '' } = event.target;\n\n    setMessage(value);\n  }\n\n  function handleOnKeyPressMessage(event) {\n    const { key } = event;\n\n    if (key === 'Enter') sendMessage(event);\n\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      <SidePanel\n        currentUser={userData}\n        userList={userList}\n        currentRoom={roomData}\n        roomList={roomList}\n        notificationRoom={notificationRoom}\n        conversationList={conversationList}\n        func={{\n          handleClickCreateRoom,\n          handleClickJoinP2P,\n          handleClickChooseRoom,\n          handleClickDisconnect\n        }}\n      />\n\n      <Message\n        currentUser={userData}\n        userList={userList}\n        currentRoom={roomData}\n        message={message}\n        messageList={messageList}\n        func={{\n          handleClickLeaveRoom,\n          handleOnChangeMessage,\n          handleOnKeyPressMessage,\n          sendMessage\n        }}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default Chat;\n","import React from 'react';\n\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Welcome from './components/Welcome/Welcome';\nimport Chat from './components/Chat/Chat';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Route path='/' exact component={Welcome} />\n      <Route path='/chat' component={Chat} />\n      <Route component={() => <div>404 Not found </div>} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}